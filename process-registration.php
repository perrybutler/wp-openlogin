<?php	// TODO: very important that we sanitize all $_POST variables here before using them!	// load the WordPress core so this page can access WP functions during an ajax call	require_once( "../../../wp-load.php" );		// initiate the user session where the openid auth token might be stored	session_start();		// prevent users from registering if the option is turned off in the dashboard	if (!get_option("users_can_register")) {		//header("Location: " . get_bloginfo("url") . "?alert=register_fail"); exit;		header("Location: " . $_SESSION["LAST_URL"] . "?alert=register_fail"); exit;	}		// registration was initiated from an openid authentication, set the username	//	and password automatically.	if ($_SESSION["OPENID_IDENTITY"] != "") {		$username = $_SESSION["OPENID_EMAIL"];		$password = wp_generate_password();	}		// registration was initiated from the standard sign up form, set the username 	//	and password that was requested by the user.	if ( $_SESSION["OPENID_IDENTITY"] == "" ) {		// this registration was initiated from the standard Registration page at BirthSource.info, create account and login the user automatically		$username = $_POST['identity'];		$password = $_POST['password'];	}		// now generate the user and log that user in automatically..		// TODO: fix this... here the existing wp_usermeta > openid value gets overwritten	//	in the case of having previously authenticated with google and then trying to	//	login with facebook...this happens because wp_insert_user() can update an existing user	//	so perhaps use wp_create_user() which will fail if the username/email already exists!	// try to generate the user	$user = array(		'user_login' => $username,		'user_pass' => $password,		'user_email' => $username	);	//$user_id = wp_insert_user( $user );	$user_id = wp_create_user( $username, $password, $username );		// if this registration was initiated by an openid login, store the user's openid profile info	//if ($_SESSION["OPENID_IDENTITY"] != "") {		//add_user_meta( $user_id, "openid", $_SESSION["OPENID_PROVIDER"] . "|" . $_SESSION["OPENID_EMAIL"] . "|" . $_SESSION["OPENID_IDENTITY"]);	//}	global $rapid_platform;	$rapid_login->user_add_linked_account($user_id);		// check for errors after wp_insert_user() before proceeding to login the user automatically	if ( is_wp_error($user_id) ) {		// registration error, redirect and notify the user		header("Location: " . $_SESSION["LAST_URL"] . "?alert=register_fail_" . $user_id->get_error_message()); exit;	}		// registration success, the user account was created, proceed to login the user automatically...		// blindly (error prone) attempt to login the new user	$creds = array();	$creds['user_login'] = $username;	$creds['user_password'] = $password;	$creds['remember'] = true;	$user = wp_signon( $creds, false );		// send a notification e-mail to the admin and the new user (we can also build our own email if necessary)	wp_new_user_notification( $user_id, $password );	//$headers = 'From: BirthSource.info <admin@birthsource.info>' . "\r\n";	//wp_mail($username, "New User Registration", "Thank you for registering!\r\nYour username: " . $username . "\r\nYour password: " . $password, $headers);		// return response to client for processing/redirect or redirect in php here	// TODO: we're dealing with two possible return paths, one of which requires a 	//	redirect (openid registration). Since we pass the registration success message to the	//  client in the redirect, only the openid registration informs the user of successful	//  registration. removing the redirect causes the openid authentication to finish at a 	//	blank process-registration.php page. The return paths should be unified; the user 	//  should always be notified (in the same way) that their registration succeeded.	if ($_SESSION["OPENID_IDENTITY"] != "") {		//header("Location: " . get_bloginfo("url") . "?alert=register_success");	}	header("Location: " . $_SESSION["LAST_URL"] . "?alert=register_success"); exit;?>